<?xml version="1.0" encoding="utf-8"?>
<section xml:id="section-2" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Let's do some geometry!</title>
  <subsection xml:id="subsec-4">
    <title>Working with schemes. </title>
    <p>
      Macaulay2 is built with the algebraic <em>geometry</em> in mind. Many of the commutative algebra functionalities have a natural extension to schemes. For example, let's build our beloved projective space <m>\mathbb P^3</m>. 
    </p>
    <sage language="macaulay2">
      <input> restart
        S = QQ[x,y,z,w]
        P3 = Proj S
      </input>
      <output>...</output>
      </sage>
      <p>
        In <m>\mathbb P^3</m>, let's make a rational quartic curve given in local coordinates as <m>(t, t^3, t^4)</m>. 
      </p>
      <sage language="macaulay2">
        <input> I = monomialCurveIdeal(S, {1,3,4})
          R = S/I
          C = Proj R
        </input>
        <output>...</output>
        </sage>
        <figure>
          <caption>A friend of the twisted cubic</caption>
          <image source="space quartic.png" width="50%">
          </image>
        </figure>
      <blockquote>
        <p>
          Was eine Kurve ist, glaubt jeder Mensch zu wissen, bis er so viel Mathematik gelernt hat, daß ihn die unzähligen möglichen Abnormalitäten verwirrt gemacht haben.
        </p>
        <p>
          Everyone knows what a curve is, until he has studied enough mathematics to become confused through the countless number of possible exceptions.
        </p>
        <attribution>Felix C. Klein</attribution>
      </blockquote>
  <p>
    We can make the sheaf of regular functions <m>\mathcal{O}_C</m> with ease.
  </p>
  <sage language="macaulay2">
    <input> OO_C
    </input>
    <output>...</output>
    </sage>
    <p>
      ... and the ideal sheaf <m>\mathcal{I}_{C/\mathbb P^3}</m>.
    </p>
    <sage language="macaulay2">
      <input> IC = sheaf (module I ** R)
      </input>
      <output>...</output>
      </sage>
      <p>
        We can do most things we want with coherent sheaves. For example, we can construct the line bundles <m>\mathcal O_C(d)</m>. 
      </p>
      <sage language="macaulay2">
        <input> OO_C(4)
        </input>
        <output>...</output>
        </sage>
        <p>
          and do direct sums <m>\oplus</m> or tensor products <m>\otimes</m>.
        </p>
        <sage language="macaulay2">
          <input> OO_C(-3)**OO_C(4)
          </input>
          <output>...</output>
          </sage>
          <sage language="macaulay2">
            <input> (OO_C(-3) ++ OO_C(4))**(OO_C(2) ++ OO_C(-1))
            </input>
            <output>...</output>
            </sage>
      <p>
        We can do all sorts of homological algebra with sheaves. Just do a few lines of code instead of calculating everything by hand! (which can be either good or bad, depending on what your goals are ..)
      </p>
      <sage language="macaulay2">
        <input> Hom(IC, OO_C)
        </input>
        <output>...</output>
        </sage>
        <sage language="macaulay2">
          <input> Ext^1(IC, OO_C)
          </input>
          <output>...</output>
          </sage>
        <p>
          Even the <em>tangent/cotangent sheaves</em> are built-in. 
        </p>
        <sage language="macaulay2">
          <input> TC = tangentSheaf C
            OmegaC = cotangentSheaf C
          </input>
          <output>...</output>
          </sage>
          <p>
            ... and of course, we are tempted to calculate some sheaf cohomology!
          </p>
          <sage language="macaulay2">
            <input> HH^0(TC)
              HH^1(TC)
            </input>
            <output>...</output>
            </sage>
            <sage language="macaulay2">
              <input> HH^0(OmegaC)
                HH^1(OmegaC)
                HH^0(OO_C)
              </input>
              <output>...</output>
              </sage>
              <p>
                ... and we have an instance of Serre duality.
              </p>
              <sage language="macaulay2">
                <input> 
                  HH^0(OO_C) == HH^1(OmegaC)
                </input>
                <output>...</output>
                </sage>
  </subsection>

  <subsection xml:id="subsec-5">
    <title>The Koszul Complex</title>
    <p>
    Many standard +notions in commutative algebra are built-in, including regular sequences. Let's ask M2 to check for us whether the following sequences are regular in the ring <m>\mathbb Z/2[x,y,z]</m>. 
    </p>
    <sage language="macaulay2">
      <input> 
        A = ZZ/2[x..z];
        X1 = {x, y*(x-1), z*(x-1)};
        isRegularSequence X1
      </input>
      <output>...</output>
      </sage>
      <sage language="macaulay2">
        <input> 
          X2 = {z*(x-1), y*(x-1), x};
          isRegularSequence X2
        </input>
        <output>...</output>
        </sage>
        <sage language="macaulay2">
          <input> 
            X3 = {1_A, x, y};
            isRegularSequence X3
          </input>
          <output>...</output>
          </sage>
          <p>
            For regular local rings, the Koszul complex is exact, so it provides a finite free resolution. Let's try to carry this out for our projective curve <m>C</m>. Recall that <m>S = \mathbb Q[x,y,z,w]</m> and <m>I = (y z-x w, z^3-y w^2, x z^2-y^2 w, y^3-x^2 z)</m>.
          </p>
          <sage language="macaulay2">
            <input> 
              koszul gens I
            </input>
            <output>...</output>
            </sage>
            <p>
              What does this mean geometrically? If we sheafify everything, then the Koszul complex becomes <me>
               0 \to O_{\mathbb P^3}(-5) \to  \cdots\to \mathcal O_{\mathbb P^3}(-2)^{\oplus 4}\to  \mathcal O_{\mathbb P^3}(-1)\to \mathcal O_{\mathbb P^3}\xrightarrow{\texttt{ gens } I} \mathcal O_C \to 0.
              </me>
              Here, <m>\mathcal O_C</m> means the proper pushforward <m>i_*\mathcal O_C</m> along the inclusion <m>i: C\to \mathbb P^3</m>. Therefore, the Koszul resolution upgrades to a <em>locally free resolution of a coherent sheaf.</em>
            </p>
            <theorem xml:id="thm-1">
              <title>Auslander-Buchsbaum, Sheaf Version</title>
              <statement>
                <p>
                  If <m>X</m> is a smooth variety, then every coherent <m>\mathcal O_X</m>-module has a finite resolution by vector bundles.
                </p>
              </statement>
            </theorem>
  </subsection>
  



</section>
